classdef TestToml < matlab.unittest.TestCase

  methods (Test)

    function testComment(testCase)
      toml_str = sprintf('\n# this is a comment\n');
      testCase.assertEmpty(fieldnames(toml.parse(toml_str)), ...
        'Improper interpretation of a comment')
    end

    function testKeyValueForm(testCase)
      toml_str = 'key = #';
      testCase.assertError(@() toml.parse(toml_str), ...
        'toml:UnspecifiedValue', 'Did not fail for unspecified value')
    end

    function testEmptyBareKey(testCase)
      toml_str = sprintf('\nkey = "value"\n= "value2"');
      testCase.assertError(@() toml.parse(toml_str), ...
        'toml:EmptyBareKey', 'Did not fail for unspecified value')
    end

    function testAllowedCharsBareKey(testCase)
      toml_str1 = 'key_text = "value"';
      toml_str2 = 'key-text = "value"';
      toml_str3 = 'key123 = "value"';
      toml_str4 = 'KEY = "value"';
      toml_str5 = '1234 = "value"';
      testCase.verifyEqual(toml.parse(toml_str1), ...
        struct('key_text', 'value'), ...
        'Did not accept a bare key with an underscore.')
      testCase.verifyEqual(toml.parse(toml_str2), ...
        struct('key_text', 'value'), ...
        'Did not accept a bare key with a dash.')
      testCase.verifyEqual(toml.parse(toml_str3), ...
        struct('key123', 'value'), ...
        'Did not accept a bare key with digits.')
      testCase.verifyEqual(toml.parse(toml_str4), ...
        struct('KEY', 'value'), ...
        'Did not accept a bare key with uppercase ASCII.')
      testCase.verifyEqual(toml.parse(toml_str5), ...
        struct('f1234', 'value'), ...
        'Did not accept a bare key with only ASCII digits.')
    end

    function testQuotedKeys(testCase)
      toml_str1 = '"127.0.0.1" = "value"';
      toml_str2 = '"character encoding" = "value"';
      toml_str3 = '''key2'' = "value"';
      toml_str4 = '''quoted "value"'' = "value"';
      testCase.verifyEqual(toml.parse(toml_str1), ...
        struct('f127_0_0_1', 'value'), ...
        'Did not handle quoted key with invalid format correctly.')
      testCase.verifyEqual(toml.parse(toml_str2), ...
        struct('character_encoding', 'value'), ...
        'Did not handle quoted key with space correctly.')
      testCase.verifyEqual(toml.parse(toml_str3), ...
        struct('key2', 'value'), ...
        'Did not handle single-quoted key correctly.')
      testCase.verifyEqual(toml.parse(toml_str4), ...
        struct('quoted_value', 'value'), ...
        'Did not handle nested quoting in key correctly.')
    end

    function testDottedKeys(testCase)
      toml_str1 = 'abc.def.ghi = "value"';
      toml_str2 = 'abc."def".ghi = "value"';
      toml_str3 = 'abc."quoted ''value''".ghi = "value"';
      testCase.verifyEqual(toml.parse(toml_str1), ...
        struct('abc', struct('def', struct('ghi', 'value'))), ...
        'Did not handle dotted key correctly.')
      testCase.verifyEqual(toml.parse(toml_str2), ...
        struct('abc', struct('def', struct('ghi', 'value'))), ...
        'Did not handle dotted and quoted key correctly.')
      testCase.verifyEqual(toml.parse(toml_str3), ...
        struct('abc', struct('quoted_value', struct('ghi', 'value'))), ...
        'Did not handle nested quoting in dotted key correctly.')
    end

    function testBasicString(testCase)
      toml_str1 = 'key = "value"';
      toml_str2 = sprintf('key = "line 1\nline 2"');
      toml_str3 = 'key = "disappearing A\b"';
      toml_str4 = 'key = "escaped \"quote\" marks"';
      toml_str5 = 'key = "inline \u0075nicode"';
      toml_str6 = 'key = "inline \U00000055nicode"';
      toml_str7 = 'key = "escaped\ttab"';
      testCase.verifyEqual(toml.parse(toml_str1), ...
        struct('key', 'value'), ...
        'Did not parse a basic string successfully.')
      testCase.verifyEqual(toml.parse(toml_str2), ...
        struct('key', sprintf('line 1\nline 2')), ...
        'Did not parse a basic string with a newline successfully.')
      testCase.verifyEqual(toml.parse(toml_str3), ...
        struct('key', sprintf('disappearing A\b')), ...
        'Did not parse a basic string with a backspace successfully.')
      testCase.verifyEqual(toml.parse(toml_str4), ...
        struct('key', 'escaped "quote" marks'), ...
        'Did not parse a basic string with escaped quotes successfully.')
      testCase.verifyEqual(toml.parse(toml_str5), ...
        struct('key', 'inline unicode'), ...
        'Did not parse a basic string with short Unicode successfully.')
      testCase.verifyEqual(toml.parse(toml_str6), ...
        struct('key', 'inline Unicode'), ...
        'Did not parse a basic string with long Unicode successfully.')
      testCase.verifyEqual(toml.parse(toml_str7), ...
        struct('key', sprintf('escaped\ttab')), ...
        'Did not parse a basic string with an escaped tab successfully.')
    end

    function testMultilineBasicString(testCase)
      toml_str1 = sprintf('key = """\nabcd"""');
      toml_str2 = sprintf('key = """line 1\n    line 2"""');
      toml_str3 = sprintf('key = """on the \\\n    same line"""');
      testCase.verifyEqual(toml.parse(toml_str1), ...
        struct('key', 'abcd'), ...
        'Did not parse a multiline basic string successfully.')
      testCase.verifyEqual(toml.parse(toml_str2), ...
        struct('key', sprintf('line 1\n    line 2')), ...
        'Did not parse a multiline basic string with indentation successfully.')
      testCase.verifyEqual(toml.parse(toml_str3), ...
        struct('key', sprintf('on the same line')), ...
        'Did not parse a multiline basic string with a LEB successfully.')
    end

    function testLiteralString(testCase)
      toml_str1 = 'key = ''C:\Users\example.txt''';
      toml_str2 = sprintf('key = ''''''\nNo leading newline here.''''''');
      testCase.verifyEqual(toml.parse(toml_str1), ...
       struct('key', 'C:\Users\example.txt'), ...
       'Did not parse a literal string with backslashes successfully.')
      testCase.verifyEqual(toml.parse(toml_str2), ...
       struct('key', 'No leading newline here.'), ...
       'Did not parse a literal string with a leading newline successfully.')
    end

  end

end